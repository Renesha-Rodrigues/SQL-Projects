select *
from layoffs;

# remove duplicates
# standardize data
# null valuea or blank values
# remove unnecesarry columns


# create duplicate table if in case data is very important rather than altering the raw data

create table layoffs_staging
like layoffs;

insert into layoffs_staging
select * 
from layoffs;

# removing duplicates

select * 
from layoffs_staging;

select *,
row_number() over(partition by company, industry, location, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_num
from layoffs_staging;         #partition by every column is needed 

with duplicate_layoffs as
(
select *,
row_number() over(partition by company, industry, location, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_num
from layoffs_staging)
select *
from duplicate_layoffs 
where row_num > 1;

select *
from layoffs_staging     # checking
where company= 'hibob';

# only remove duplicate  not original ones , hence look at the exact rows

with duplicate_layoffs as
(
select *,
row_number() over(partition by company, industry, location, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_num
from layoffs_staging)
delete
from duplicate_layoffs 
where row_num = 2;   #  says delete is not updatable in cte

# so creating a table where we make row_num as a column and removing the row_num < 1 

CREATE TABLE `layoffs_staging1` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

select * 
from layoffs_staging1;

insert into layoffs_staging1
select *,
row_number() over(partition by company, location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_num
from layoffs_staging; 

select * 
from layoffs_staging1
where row_num > 1;

delete
from layoffs_staging1
where row_num > 1;

# standardizing data - finding issues in the data and then fixing it

select *
from layoffs_staging1;

select distinct company
from layoffs_staging1;

select company, trim(company)
from layoffs_staging1;

# now to update the trimmed column 
update layoffs_staging1
set company = trim(company);


select distinct industry
from layoffs_staging1;

select distinct industry
from layoffs_staging1
order by 1;

select *
from layoffs_staging1
where industry like 'crypto%';

update layoffs_staging1
set industry = 'crypto'
where industry like 'crypto%'
;

select distinct location
from layoffs_staging1
order by 1;

select distinct country
from layoffs_staging1
order by 1;

select distinct country, trim(trailing '.' from country)
from layoffs_staging1
order by 1;

update layoffs_staging1
set country = trim(trailing '.' from country)
where country like 'United States%';


# changing date from text to time , could be done before importing too

select `date`,
STR_TO_DATE (`date`, '%m/%d/%Y')
from layoffs_staging1;

update layoffs_staging1
set `date` = STR_TO_DATE (`date`, '%m/%d/%Y');

select `date`
from layoffs_staging1;

# to alter table database

alter table layoffs_staging1
modify column `date` date ;

# working with null AND blank values

select * 
from layoffs_staging1
where company = 'Airbnb';

select *
from layoffs_staging1
where industry is null or industry= '';

update layoffs_staging1
set industry= null
where industry = '';
 
select t1.industry, t2.industry
from layoffs_staging1 t1
join layoffs_staging1 t2
on t1.company = t2.company
and t1.location = t2.location
where (t1.industry is null or t1.industry = '')
 and  t2.industry is not null;
 
 update  layoffs_staging1 t1
join layoffs_staging1 t2
on t1.company = t2.company
set t1.industry= t2.industry
where  t1.industry is null 
 and  t2.industry is not null;


#checking through airbnb
select * 
from layoffs_staging1
where company = 'Airbnb';

select *
from layoffs_staging1;

# removing unwanted columns and rows

select * 
from layoffs_staging1
where total_laid_off is null
and percentage_laid_off is null;

delete
from layoffs_staging1
where total_laid_off is null
and percentage_laid_off is null;
# deleted above data

# to remove column

alter table layoffs_staging1
drop column row_num;

select *
from layoffs_staging1;
